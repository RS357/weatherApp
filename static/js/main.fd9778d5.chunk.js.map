{"version":3,"sources":["submitComponent/submitComponent.js","textboxComponent/textboxComponent.js","formComponent/formComponent.js","weatherComponent/weatherComponent.js","App.js","serviceWorker.js","index.js"],"names":["SubmitComponent","_ref","handleSubmit","react_default","a","createElement","className","type","value","onClick","Textbox","location","handleChange","placeholder","onChange","FormComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchWeather","cityName","state","city","weatherAPI","concat","fetch","cache","then","response","json","data","setWeatherData","catch","err","alert","event","preventDefault","setState","target","textboxComponent_textboxComponent","submitComponent_submitComponent","React","Component","WeatherComponent","icon","description","temperature","index_es","lib_default","format","ticking","timezone","App","weatherComponent_weatherComponent","faCloudSunRain","main","formComponent_formComponent","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd9778d5.chunk.js","sourcesContent":["import React from 'react';\nimport './submitComponent.css';\n\nfunction SubmitComponent({handleSubmit}) {\n    return (\n        <input className='submitBox' type='submit' value='submit' onClick={handleSubmit} />\n    )  \n}\n\nexport default SubmitComponent;\n","import React from 'react';\nimport './textboxComponent.css'\n\nfunction Textbox({location, handleChange}){\n    return(\n        <input className='textBox' type='text' value={location} placeholder='Search for location' onChange={handleChange}/>\n    )\n}\n\nexport default Textbox","import React from 'react';\nimport SubmitComponent from '../submitComponent/submitComponent.js';\nimport TextboxComponent from '../textboxComponent/textboxComponent.js';\nimport './formComponent.css';\n\nclass FormComponent extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      city: ''\n    }\n  }\n\n  fetchWeather = () => {\n    let cityName = this.state.city;\n    let weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=a1a331f3fdba57d905c6274db55f1dc4`\n    fetch(weatherAPI, {cache: 'no-store'})\n      .then(response => response.json())\n      .then(data => {\n        this.props.setWeatherData(data)\n      }).catch(err => {\n        if(err == \"TypeError: Cannot read property '0' of undefined\") {\n          alert('Please ensure you have entered a valid city name and try again')  \n        } else {\n          alert(err)\n        }\n      })\n    }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.fetchWeather()\n  }\n\n  handleChange = (event) => {\n    this.setState({city: event.target.value}); \n  }\n\n\n  render() {\n    return (\n      <form className='formContainer'>\n        <p className='label'>Find a forecast</p>\n          <TextboxComponent className='textAndSubmitComponents' city={this.state.city}  handleChange={this.handleChange}/>\n          <SubmitComponent className='textAndSubmitComponents' handleSubmit={this.handleSubmit} />\n      </form>\n    )\n  }\n}\n\nexport default FormComponent;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './weatherComponent.css';\nimport Clock from 'react-live-clock';\n\n\nfunction WeatherComponent({icon, description, temperature, location}) {\n  return (\n    <div className='cityNameContainer'>\n      <p \n      className='cityName'>\n        <FontAwesomeIcon \n          className='weatherIcon' \n          icon={icon} \n        />\n      {location}</p>\n      <div className='forecastContainer'>\n        <Clock format={'HH:mm:ss'} ticking={true} timezone={'UK'}/> \n        <h4>{description}</h4>\n        <h4>{temperature}</h4>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherComponent;\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormComponent from './formComponent/formComponent.js';\nimport WeatherComponent from './weatherComponent/weatherComponent.js';\nimport { faCloudSunRain } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      location: '',\n      description: '',\n      temperature: '',\n    }\n}\n\n  setWeatherData = data =>{\n    this.setState({\n      location: 'Weather forecast for' + data['name'],\n      description: data['weather'][0]['description'] ,\n      temperature: data['main']['temp']\n    })\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"weatherApp\">\n        <WeatherComponent \n            icon={faCloudSunRain} \n            location={this.state.location} \n            main={this.state.main} \n            description={this.state.description} \n            temperature={this.state.temperature} \n        />\n        <FormComponent \n          fetchWeather={this.fetchWeather} \n          setWeatherData={this.setWeatherData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}