{"version":3,"sources":["formComponent/formComponent.js","weatherComponent/weatherComponent.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchWeather","cityName","state","city","fetch","concat","cache","then","response","json","data","setWeatherData","handleSubmit","event","preventDefault","handleChange","setState","target","value","react_default","a","createElement","onSubmit","type","placeholder","onChange","onClick","React","Component","WeatherComponent","_ref","main","description","temperature","App","console","log","className","formComponent","weatherComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAyCeA,qBAtCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,aAAe,WACb,IAAIC,EAAWR,EAAKS,MAAMC,KAC1BC,MAAK,qDAAAC,OAAsDJ,EAAtD,2CAAyG,CAACK,MAAO,aACnHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJjB,EAAKD,MAAMmB,eAAeD,MAZdjB,EAgBlBmB,aAAe,SAACC,GACdA,EAAMC,iBACNrB,EAAKO,gBAlBWP,EAqBlBsB,aAAe,SAACF,GACdpB,EAAKuB,SAAS,CAACb,KAAMU,EAAMI,OAAOC,SApBlCzB,EAAKS,MAAQ,CACXC,KAAM,IAHQV,wEA2BhB,OACE0B,EAAAC,EAAAC,cAAA,QAAMC,SAAU1B,KAAKgB,cACnBO,EAAAC,EAAAC,cAAA,yBACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOL,MAAOtB,KAAKM,MAAMC,KAAMqB,YAAY,OAAOC,SAAU7B,KAAKmB,gBAE/EI,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASL,MAAM,SAASQ,QAAS9B,KAAKgB,uBAjC9Be,IAAMC,YCYnBC,MAZf,SAAAC,GAAkE,IAAvCC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,YAAa9B,EAAO2B,EAAP3B,KACzD,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UAAKlB,GACLgB,EAAAC,EAAAC,cAAA,cAAMU,GACNZ,EAAAC,EAAAC,cAAA,UAAKW,GACLb,EAAAC,EAAAC,cAAA,UAAKY,KCgCIC,cAnCb,SAAAA,EAAY1C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,IAChBzC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwC,GAAAnC,KAAAH,KAAMJ,KAURmB,eAAiB,SAAAD,GACfyB,QAAQC,IAAI,cAAe1B,GAC3BjB,EAAKuB,SAAS,CACZb,KAAMO,EAAI,KACVqB,KAAMrB,EAAI,QAAY,GAAhB,KACNsB,YAAatB,EAAI,QAAY,GAAhB,YACbuB,YAAavB,EAAI,KAAJ,QAdfjB,EAAKS,MAAQ,CACXC,KAAM,GACN4B,KAAM,GACNC,YAAa,GACbC,YAAa,IAPCxC,wEA0BhB,OACE0B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACiB,EAAD,CAAetC,aAAcJ,KAAKI,aAAcW,eAAgBf,KAAKe,iBACrEQ,EAAAC,EAAAC,cAACkB,EAAD,CAAkBpC,KAAMP,KAAKM,MAAMC,KAAM4B,KAAMnC,KAAKM,MAAM6B,KAAMC,YAAapC,KAAKM,MAAM8B,YAAaC,YAAarC,KAAKM,MAAM+B,sBA9BnHL,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.34eeee91.chunk.js","sourcesContent":["import React from 'react';\n\nclass FormComponent extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      city: ''\n    }\n  }\n\n  fetchWeather = () => {\n    let cityName = this.state.city;\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=a1a331f3fdba57d905c6274db55f1dc4`, {cache: 'no-store'})\n      .then(response => response.json())\n      .then(data => {\n        this.props.setWeatherData(data)\n      })\n    }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.fetchWeather()\n  }\n\n  handleChange = (event) => {\n    this.setState({city: event.target.value});\n  }\n\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label> Country:\n          <input type='text' value={this.state.city} placeholder='city' onChange={this.handleChange}/>\n        </label>\n        <input type='submit' value='submit' onClick={this.handleSubmit} />\n      </form>\n    )\n  }\n}\n\nexport default FormComponent;\n","import React from 'react';\n\nfunction WeatherComponent({main, description, temperature, city}) {\n  return (\n    <div>\n      <p>weather</p>\n      <h4>{city}</h4>\n      <h4> {main}</h4>\n      <h4>{description}</h4>\n      <h4>{temperature}</h4>\n    </div>\n  )\n}\n\nexport default WeatherComponent;\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormComponent from './formComponent/formComponent.js';\nimport WeatherComponent from './weatherComponent/weatherComponent.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      city: '',\n      main: '',\n      description: '',\n      temperature: '',\n    }\n}\n\n  setWeatherData = data =>{\n    console.log('weatherData', data)\n    this.setState({\n      city: data['name'],\n      main: data['weather'][0]['main'],\n      description: data['weather'][0]['description'] ,\n      temperature: data['main']['temp']\n    })\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FormComponent fetchWeather={this.fetchWeather} setWeatherData={this.setWeatherData} />\n        <WeatherComponent city={this.state.city} main={this.state.main} description={this.state.description} temperature={this.state.temperature} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}