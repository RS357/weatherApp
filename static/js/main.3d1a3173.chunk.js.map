{"version":3,"sources":["SubmitButton/SubmitButton.js","TextInput/TextInput.js","UnitButton/UnitButton.js","Form/Form.js","WeatherDisplay/WeatherDisplay.js","ErrorWarning/ErrorWarning.js","App.js","serviceWorker.js","index.js"],"names":["SubmitButton","_ref","handleSubmit","react_default","a","createElement","className","type","value","onClick","TextInput","location","handleChange","placeholder","onChange","UnitButton","celsius","unitChange","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tempConvertor","fetchWeather","cityName","state","city","weatherAPI","concat","fetch","cache","then","response","json","data","setWeatherData","event","preventDefault","setState","target","src_TextInput_TextInput","src_SubmitButton_SubmitButton","index_es","icon","faCloudSunRain","src_UnitButton_UnitButton","lib_default","format","ticking","timezone","React","Component","temperatureDisplay","temperature","WeatherDisplay","description","ErrorWarning","error","App","message","name","weather","main","temp","toFixed","src_Form_Form","src_ErrorWarning_ErrorWarning","src_WeatherDisplay_WeatherDisplay","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d1a3173.chunk.js","sourcesContent":["import React from 'react';\nimport './SubmitButton.css';\n\nfunction SubmitButton({handleSubmit}) {\n    return (\n        <input className='submitBox' \n        type='submit' \n        value='submit' \n        onClick={handleSubmit} \n        />\n    )  \n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport './TextInput.css'\n\nfunction TextInput({location, handleChange}){\n    return(\n        <input className='textInput'\n         type='text' \n         value={location} \n         placeholder='Search for location' \n         onChange={handleChange}\n         />\n    )\n}\n\nexport default TextInput","import React from 'react'; \nimport './UnitButton.css';\n\nfunction UnitButton({celsius, unitChange}) {\n    if(celsius){\n        return(\n            <button type='button' onClick={unitChange}>\n                To 째F\n            </button>\n        )\n    } else {\n        return (\n            <button type='button' onClick={unitChange}>\n                To 째C\n            </button>\n        )\n    }\n\n\n}\n\nexport default UnitButton;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudSunRain } from '@fortawesome/free-solid-svg-icons'\nimport Clock from 'react-live-clock';\nimport SubmitButton from '../SubmitButton/SubmitButton.js';\nimport TextInput from '../TextInput/TextInput.js';\nimport './Form.css';\nimport UnitButton from '../UnitButton/UnitButton.js'\n\nclass Form extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      city: ''\n    }\n  }\n\n  unitChange = () => {\n    this.props.tempConvertor()\n  } \n\n  fetchWeather = () => {\n    let cityName = this.state.city;\n    let weatherAPI = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=a1a331f3fdba57d905c6274db55f1dc4`\n    fetch(weatherAPI, {cache: 'no-store'})\n      .then(response => response.json())\n      .then(data => {\n        this.props.setWeatherData(data)\n      })\n    }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.fetchWeather()\n  }\n\n  handleChange = (event) => {\n    this.setState({city: event.target.value}); \n  }\n\n\n  render() {\n    const {celsius} = this.props\n    return (\n      <form className='formContainer'>\n        <TextInput\n          className='textAndSubmitComponents' \n          city={this.state.city} \n          handleChange={this.handleChange}\n        />\n        <SubmitButton \n          className='textAndSubmitComponents' \n          handleSubmit={this.handleSubmit} \n        />\n        <div className='iconClockContainer'>\n          <span className='label'>\n            <FontAwesomeIcon \n              className='weatherIcon' \n              icon={faCloudSunRain} \n            />\n            Find a forecast\n          </span>\n          <UnitButton \n            unitChange={this.unitChange} \n            celsius={celsius}\n          />\n           <Clock \n            className='time' \n            format={'HH:mm:ss'} \n            ticking={true} \n            timezone={'UK'}\n          />\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport './WeatherDisplay.css';\n\nlet temperatureDisplay = (celsius, temperature) => {\n  if(celsius && temperature) {\n    return temperature + '째C'\n  } else if (temperature){\n    return temperature + '째F'\n  }\n  }\n\n\nfunction WeatherDisplay({description, temperature, location, celsius}) {\n  return (\n    <div className='cityNameContainer'>\n      <p className='cityName'>\n        {location? 'Weather forecast for ' + location : '' }\n      </p>\n      <div className='forecastContainer'>\n        <h4>{description}</h4>\n        <h4>{temperatureDisplay(celsius, temperature)}\n        </h4>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherDisplay;\n","import React from 'react';\nimport './ErrorWarning.css'\n\nfunction ErrorWarning ({error}) {\n    if (error){\n        return(\n            <div className='error'>Please enter a valid location name</div>\n        )\n    } else {\n        return ''\n    }\n\n}\n\nexport default ErrorWarning","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form/Form.js';\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay.js';\nimport ErrorWarning from './ErrorWarning/ErrorWarning.js'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      location: '',\n      description: '',\n      temperature: '',\n      error: false,\n      celsius: true\n    }\n}\n\n  setWeatherData = data => {\n    if (data.message === 'city not found'){\n      this.setState({\n        location: '',\n        description: '',\n        temperature: '',\n        error: true \n      });\n    } else {\n      this.setState({\n        location: data.name,\n        description: data.weather[0].description ,\n        temperature: data.main.temp,\n        error: false, \n      });\n  \n    }\n  }\n\n  tempConvertor = () => {\n    if(this.state.celsius) {    \n      this.setState({\n        temperature: ((this.state.temperature * 9/5) + 32).toFixed(1),\n        celsius: false\n      });\n    } else {\n      this.setState({\n        temperature:((this.state.temperature - 32) * 5/9).toFixed(1),\n        celsius: true\n      });\n    }\n    \n  }\n\n  render() {    \n    return (\n      <div className=\"weatherApp\">\n        <Form\n          setWeatherData={this.setWeatherData}\n          celsius={this.state.celsius}\n          tempConvertor={this.tempConvertor}\n        />\n        <ErrorWarning error={this.state.error} />\n        <WeatherDisplay\n          celsius={this.state.celsius}        \n          location={this.state.location} \n          main={this.state.main} \n          description={this.state.description} \n          temperature={this.state.temperature} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}